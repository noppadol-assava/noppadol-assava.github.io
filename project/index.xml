<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects | Noppadol A.</title><link>https://noppadol-assava.github.io/project/</link><atom:link href="https://noppadol-assava.github.io/project/index.xml" rel="self" type="application/rss+xml"/><description>Projects</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 13 May 2022 00:00:00 +0000</lastBuildDate><image><url>https://noppadol-assava.github.io/media/icon_hub27f62f6847a5f55a415fc9de2c8f74e_25503_512x512_fill_lanczos_center_3.png</url><title>Projects</title><link>https://noppadol-assava.github.io/project/</link></image><item><title>torlib Python package</title><link>https://noppadol-assava.github.io/project/torlib/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://noppadol-assava.github.io/project/torlib/</guid><description/></item><item><title>Chatbot Project</title><link>https://noppadol-assava.github.io/project/chatbot/</link><pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate><guid>https://noppadol-assava.github.io/project/chatbot/</guid><description>&lt;p>Recommendation systems have played a large role in the Software Engineering research landscape. Applications have ranged from source code elements, APIs and reviewer recommendations, with techniques borrowed from the Information Retrieval, and Machine Learning domains. In recent times, there has been work into a new method of interaction, which is ChatBots, especially for Software Engineering. Early work has been aimed at using bots for mining software repositories, providing task-oriented feedback for the software developer. In this work, we would like to take the ChatBots one step forward, but using them inconjunction with recommendation systems to provide an interactive experience for recommendations. As a case study, we focus on the existing reviewer recommendation systems, and propose how using a ChatBot may enhance the solution, to provide a more accurate and realistic recommendation for the practitioner. In the end, we highlight the potential and next steps to utilize ChatBots into existing Software Engineering recommendation systems.&lt;/p></description></item><item><title>First Response Analysis</title><link>https://noppadol-assava.github.io/project/first_response/</link><pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate><guid>https://noppadol-assava.github.io/project/first_response/</guid><description>&lt;p>Open Source Software (OSS) projects rely on a continuous stream of new contributors for sustainable livelihood. Recent studies reported that new contributors experience many barriers in their first contribution. One of the critical barriers is the social barrier. Although a number of studies investigated the social barriers to new contributors, to the best of our knowledge, the relationship between the first response to the first contributions and their future contributions has not been studied comprehensively.
In this project, we introduce the study protocols that investigate the correlation between the first response given to the first contributions and the future contribution. First, we performed a preliminary survey to manually explore the sentiments of the first response. Preliminary analysis confirms that the first responses are mainly neutral.
Our execution plan includes both qualitative and quantitative approaches with three research questions. We inspect the first response of the first contributions, investigate the effects of characteristics of the first response to the interaction between first-time-contributor and project contributors, and find the impact of the interactions between other contributors.&lt;/p></description></item><item><title>Software Team Recommendation</title><link>https://noppadol-assava.github.io/project/software_team_rec/</link><pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate><guid>https://noppadol-assava.github.io/project/software_team_rec/</guid><description>&lt;p>In large-scale collaborative software development, building a team of software practitioners can be challenging, mainly due to overloading choices of candidate members to fill in each role. Furthermore, having to understand all membersâ€™ diverse backgrounds, and anticipate team compatibility could significantly complicate and attenuate such a team formation process. Current solutions that aim to automatically suggest software practitioners for a task merely target particular roles, such as developers, reviewers, and integrators. While these existing approaches could alleviate issues presented by choice overloading, they fail to address team compatibility while members collaborate. In this project, we propose RECAST, an intelligent recommendation system that suggests team configurations that satisfy not only the role requirements, but also the necessary technical skills and teamwork compatibility, given task description and a task assignee. Specifically, RECAST uses Max-Logit to intelligently enumerate and rank teams based on the team-fitness scores. Machine learning algorithms are adapted to generate a scoring function that learns from heterogenous features characterizing effective software teams in large-scale collaborative software development. RECAST is evaluated against a state-of-the-art team recommendation algorithm using three well-known open-source software project datasets. The evaluation results are promising, illustrating that our proposed method outperforms the baselines in terms of team recommendation with 646% improvement (MRR) using the exact-match evaluation protocol.&lt;/p></description></item></channel></rss>